# -*- coding: utf-8 -*-
"""IrisFlowerClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uqkkxljdZZfN1DfwTMKGP8zx0rdSd8_T

<div align="centre">
        <h1>Data Science Internship [CipherByte Technologies]</h1>
        <br>
        <h3>
            Name: Suhani Gurjar<br>
            Task 1: Iris Flower Classification Model
        </h3>
        <br>
        <h4>Iris flower has three species; setosa, versicolor, and virginica, which differ according to their measurements. We were given a dataset consisting of the measurements of various iris flowers. The task is to train a machine learning model using this dataset to learn from the measurements and classify the species of the Iris flowers.</h4>
    </div>
"""

#Importing required libraries
import pandas as pd
from sklearn.preprocessing import LabelEncoder

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

#Data collection and pre-processing
iris_data=pd.read_csv("Iris_Flower_Data.csv")
iris_data

iris_data=iris_data.drop(columns=['Id'])
iris_data

missing_values = iris_data.isnull().sum()
missing_values

#Scatter Plot for data visualizaton
figure = px.scatter(iris_data, x='SepalLengthCm', y='SepalWidthCm', color='Species',
                 title='Sepal Length vs Sepal Width', labels={'Species': 'Species'})
figure.show()

figure = px.scatter(iris_data, x='PetalLengthCm', y='PetalWidthCm', color='Species',
                 title='Petal Length vs Petal Width', labels={'Species': 'Species'})
figure.show()

# Boxplot to visualize the distribution of each feature
plt.figure(figsize=(12, 6))
for i, feature in enumerate(iris_data.columns[:-1]):
    plt.subplot(2, 2, i+1)
    sns.boxplot(x='Species', y=feature, data=iris_data)
    plt.title(f'Distribution of {feature} by Species')


plt.tight_layout()
plt.show()

#Label Encoding 'Species' column
label_encoder = LabelEncoder()
iris_data['Species'] = label_encoder.fit_transform(iris_data['Species'])
iris_data.sample(5)

#Splitting the dataset for training and testing
X = iris_data.drop('Species', axis=1)
y = iris_data['Species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=66)

#Training the model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

#Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

report = classification_report(y_test, y_pred)

print("Classification Report:")
print(report)

conf_matrix = confusion_matrix(y_test, y_pred)

print("Confusion Matrix:")
print(conf_matrix)

from sklearn.model_selection import  cross_val_score

cv_scores = cross_val_score(model, X, y, cv=5)
print(f"Logistic Regression Cross-Validation Scores: {cv_scores}")
print(f"Logistic Regression Mean Cross-Validation Score: {cv_scores.mean()}")

#Testing the model using new data points

# Defined the new data point manually
sepal_length = float(input("Enter sepal length: "))
sepal_width = float(input("Enter sepal width: "))
petal_length = float(input("Enter petal length: "))
petal_width = float(input("Enter petal width: "))

# Created a DataFrame with the same feature names as used in training
features = pd.DataFrame([[sepal_length, sepal_width, petal_length, petal_width]],
                        columns=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm',])

# Predict the class for the new data point
prediction = model.predict(features)

# Decode the predicted class
predicted_class = label_encoder.inverse_transform(prediction)
print(f"Predicted class for the new data: {predicted_class[0]}")

