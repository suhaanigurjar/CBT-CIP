# -*- coding: utf-8 -*-
"""TimeSeriesForecasting2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Xp3hxUqGy5gUegj9T3sq054RUiFsEqW

<div align="centre">
        <h1>Data Science Internship [CipherByte Technologies]</h1>
        <br>
        <h3>
            Name: Suhani Gurjar<br>
            Task 2: Time Series Forecasting
        </h3>
        <br>
        <h4>Used Prophet to forecast time series for miles travelled</h4>
    </div>
"""

!pip install prophet

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np
from prophet import Prophet

# Load Miles travelled data
miles_data = pd.read_csv('Miles_Travelled.csv', parse_dates=['DATE'])

# Renamed columns to fit Prophet's requirements
miles_data.rename(columns={'DATE': 'ds', 'TRFVOLUSM227NFWA': 'y'}, inplace=True)

print("Miles Data:")
print(miles_data.head())

def fit_prophet_and_forecast(data):
    # Split data into train and test sets
    train_size = int(len(data) * 0.85)
    train, test = data[:train_size], data[train_size:]

    # Initialize and fit the Prophet model
    model = Prophet(yearly_seasonality=True, daily_seasonality=False)
    model.fit(train)

    # Create a dataframe to hold predictions
    future = model.make_future_dataframe(periods=len(test), freq='M')
    forecast = model.predict(future)

    # Extract the forecasted values for the test period
    forecast_test = forecast.iloc[-len(test):]['yhat']

    # Evaluate forecasts
    rmse = np.sqrt(mean_squared_error(test['y'], forecast_test))
    mae = mean_absolute_error(test['y'], forecast_test)

    return model, rmse, mae, forecast, test


model, Miles_rmse, Miles_mae, Miles_forecast, test = fit_prophet_and_forecast(miles_data)
print("\n")
print(f'Miles travelled - RMSE: {Miles_rmse:.2f}')
print(f'Miles travelled - MAE: {Miles_mae:.2f}')

# Plot Miles travelled over time
plt.figure(figsize=(12, 6))
plt.plot(miles_data['ds'], miles_data['y'], label='Miles travelled')
plt.title('Miles travelled Over Time')
plt.xlabel('DATE')
plt.ylabel('TRFVOLUSM227NFWA')
plt.legend()
plt.show()

# Plot Miles travelled actual vs. forecasted with confidence intervals
plt.figure(figsize=(12, 6))
plt.plot(miles_data['ds'], miles_data['y'], label='Actual')
plt.plot(Miles_forecast['ds'], Miles_forecast['yhat'], label='Forecast', color='r')
plt.fill_between(Miles_forecast['ds'],
                 Miles_forecast['yhat_lower'], Miles_forecast['yhat_upper'],
                 color='pink', alpha=0.3)
plt.title('Miles travelled Forecast with Confidence Intervals')
plt.xlabel('DATE')
plt.ylabel('TRFVOLUSM227NFWA')
plt.legend()
plt.show()

# Plot residuals
residuals = test['y'] - Miles_forecast.iloc[-len(test):]['yhat']
plt.figure(figsize=(12, 6))
plt.plot(miles_data['ds'][int(len(miles_data) * 0.85):], residuals, label='Residuals')
plt.axhline(y=0, color='r', linestyle='--')
plt.title('Residuals of Miles travelled Forecast')
plt.xlabel('DATE')
plt.ylabel('Residuals')
plt.legend()
plt.show()

# Forecasted values table
forecast_table = Miles_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]
print(forecast_table)

future_periods = 144
future = model.make_future_dataframe(periods=future_periods, freq='M')

# Generate forecast
forecast = model.predict(future)

# Plot the extended forecast
plt.figure(figsize=(12, 6))
plt.plot(miles_data['ds'], miles_data['y'], label='Actual')
plt.plot(forecast['ds'], forecast['yhat'], label='Forecast', color='r')
plt.fill_between(forecast['ds'],
                 forecast['yhat_lower'], forecast['yhat_upper'],
                 color='pink', alpha=0.3)
plt.title(f'Miles travelled Forecast with {future_periods} Future Periods')
plt.xlabel('DATE')
plt.ylabel('TRFVOLUSM227NFWA')
plt.legend()
plt.show()

# future forecasted values
future_forecast = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(future_periods)
print(future_forecast)

